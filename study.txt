[쉽고 자연스럽게 배워보는 Javasciprt]


//1. 구구단 준비
<<개발 환경 구축>>
* 소스트리: 
스테이지에 올라가지 않은 파일 - 모두 스테이지에 올리기 - 커밋 - push



<<자바스크립트로 무엇을 할 수 있나?>>
* 
@html
<p id="txt">지금은 몇 시인가요?</p>


@javascript
var elem = document.getElementById('txt');	//좌는 Element 객체, 우는 찾으려는 요소 ID
elem.innerHTML = Date();			//현재 날짜로 demo가 설정한 요소의 내용(HTML)을 바꿈

elem.style.color = "red";
elem.style.background = "black";

var size = 10;
function big() {
    elem.style.fontSize = size + "px";
    size = size + 1;            
}
var tid = setInterval(big, 100);



<<자료형>>
* 강사님께서 아는 내용이면 스킵하라고 하셔서 스킵함



<<변수>>
* = 대입 연산자, === 같다

* 변수 이름 잘 짓기
- 소문자로 시작
- 카멜 케이스(numPeople)이나 스네이크 케이스(num_people) 사용



<<연산자 및 기타>>
* 문자열의 길이 구하기: 변수명.length;	//공백 포함

* 문자열 간단히 조작하기(메소드 사용)
var a = "KheLLo"
a[0];			//K
a[1] ="H"; 		//안 됨
a.slice(1,4);		//1~3까지 보임. heL
a.toUpperCase();		//문자열 전부 대문자로 변경. 하지만 실제 변수가 변경 되지 않음.
a.toLowerCase();		//문자열 전부 소문자로 변경. 하지만 실제 변수가 변경 되지 않음.

* NaN: 값이 아니다. === 계산불가능.

* alert() 과 prompt() 사용해 보기
var ans = prompt("How are you?");	//팝업창 나옴. 입력창에 문자 쓰면 ans에 담김.

* 만약 prompt()로 숫자를 받고 싶다면
var num = prompt("숫자를 입력하여 주세요");
num = Number(num);



<<연습문제1>>
1. 두 수를 입력받아 4칙연산의 결과를 표시해 봅시다.		//ex1-1.html
2. BMI를 계산하는 프로그램을 작성해 봅시다.			//ex1-2.html
3. 화씨를 입력받아서 섭씨로 바꾸는 프로그램을 작성해 봅시다.	//ex1-3.html
4. 입력한 문자열의 길이를 알려주는 프로그램을 작성해 봅시다.	//ex1-4.html



<<if 조건문: 예제>>
1. 입력받은 숫자가 홀수인지 짝수인지를 알려주는 프로그램을 작성해 봅시다.	//if-1.html
2. 입력받은 문자가 대문자로 되어 있으면 '대문자 문장입니다.' 소문자로 되어 있으면 '소문자 문장입니다.' 그 외에는 '보통 문장입니다.' 라고 출력하는 프로그램을 작성해 보세요.	//if-2.html



<<반복문1: 예제>>
1. 사용자가 입력한 수들의 갯수와 합을 구하는 프로그램을 작성해 봅시다. (단 0을 입력받으면 입력 종료)	//loop-1.html, 강사님 답안 코드 참고하여 수정함
2. 1에서 100까지 짝수의 합을 구해 봅시다.	//loop-2.html



<<연습문제2>>
1. 소수 판별 프로그램: 사용자가 입력한 숫자가 소수인지 아닌지 알려주는 프로그램을 작성해 봅시다.		//ex2.html

* HTML에 쓰고 싶다면 document.write();



<<왕초보 git과 github1>>
* 절차
github 가입
github 저장소 생성
github 저장소 클론
내 컴퓨터의 내 문서 아래에 생성된 프로젝트 디렉토리에서 파일 생성 및 작업 완료
커밋할 파일들 선택해서 스테이지에 올리기 (add)
커밋하기 (commit)
푸시하기 (push)

github.com/내아이디/내프로젝트 링크를 통해 정상적으로 업로드 되어 있는지 확인

* git이란: 형상 관리 시스템(Verson Control System) 의 한 종류입니다. 주로 개발자들이 프로그램과 관련된 파일들을 저장하는 데 사용합니다. 게임의 세이브 포인트와 유사한데, 언제든지 저장 시점으로 되돌아 갈 수 있습니다. 여기서는 세 가지 기본 기념만 배우려 합니다.

* 커밋 메세지 작성법
첫 줄에 간단하지만 명확하게 내용을 씁니다. 한 줄 비우고 자세한 내용을 적습니다.



[실습] 구구단 구현하기1
*구구단에서 2단과 3단을 계산하고 화면에 출력한다.
예를 들어 2단은 2 곱하기 1 계산후 계산 값을 출력, 2 곱하기 2 계산 후 계산 값을 출력 ... 2곱하기 9까지 반복. 3단은 같은 과정을 반복
프로그램 1: 처음에는 콘솔에 출력하는 프로그램을 작성한다.
프로그램 2: 두번째는 html 화면에 출력하는 프로그램을 작성한다.
각 프로그램 작성후 커밋을 한다.

gugudan_1.html	//구구단 2, 3단 출력
gugudan_2.html	//구구단 N단 출력
gugudad_3.html	//구구단 N단 출력 + 조건문 입력하여 입력문 2~9만 받기



<<배열과 문자열1>>
*  배열 만들기:
var array = [10, 20, 30];

* 배열의 타입 알아보기
typeof array		//object
typeof array[0]		//number

* 배열 만들기2:
var array = [];
array[0] = 10;
array[1] = 20;

* 배열의 마지막 원소 읽어오기:
array[array.length - 1];

* 문자열과 배열의 차이:
var str = "hello";
a = str.split("");
a		//["h", "e", "l", "l", "o"]	//Mutable

str[0] = "k";
str		//"hello"			//Immutable

* 배열의 메소드들
- push(), pop()		//배열 뒤에서 처리
var arr = [10, 20];
var x = arr.pop();	
x		//20;
arr		//[10]
arr.push(50);
arr		//[10, 50]

- shift(), unshift()		//배열 앞에서 처리
var arr = [10, 20];
arr.unshift(50);	//3
arr.unshift(60);	//4
arr		//[10, 20, 50, 60]

var x = arr.shift();	//10
x		//10
arr		//[20, 50, 60]



<<함수2: 함수와 리턴값>>
* 함수를 사용하면 가독성이 좋아짐, 유지보수를 잘 하게 됨

* 함수 어떻게 만들까?
- 매개 변수와 리턴을 적극적으로 활용하자.
- 줄 수가 지나치게 길어지면 함수로 빼자. (10줄 정도)
- 인덴트가 지나치게 깊어져도 함수로 빼자.
- 함수는 반드시 한 가지 일만 하도록 하자.

* (Option) 2중 루프를 한 번에 빠져 나가기
- `break` 명령은 한 번에 한 루프만 빠져나갑니다.
- 함수의 `return` 을 이용하면 2중 루프를 한 번에 종료할 수 있습니다. 



<<객체>>
* 객체란 무엇인가?:
- 현실의 물체에 대응되는 개념
- 객체를 사용하면 변수와 함수를 묶어서 관리하게 됨
- 객체는 속성과 메소드를 가짐

* 객체 만들기, 속성, 메소드:
var obj() = {};
obj.name = "SiYeon";
obj;		//{name: "SiYeon"}

obj.eat = function(food){
	console.log(this.name + " ate delicious " + food + "...");
};

obj.eat("Beef");

obj		//{name: "SiYeon", eat: f}	//eat라는 function이 있음


* 만약 메소드 대신에 일반 함수를 썼다면
eat(p1, "Beef");	//가독성이 떨어지게 됨

* 객체 지향 프로그래밍
- 유지보수가 쉬워진다.
- 가독성이 높아진다.
- 대형 프로그램을 짜기 쉬워진다.

* 객체 지향 프로그래밍
- 객체와 객체가 협력해서 일을 한다.
- 객체는 일에 책임을 진다.
- 객체는 객체에 메시지를 보낸다.
- 객체는 자율적으로 일을 한다.

* this 키워드 : 메소드 안에서 사용시 함수를 소유한 객체를 가르킨다.
var p2 = {};
p2.name = "crong";
p2.weight = 80;
p2.say = function(word) {
    console.log(this.name + " says, " + word);		//crong says, word
};

* JSON : 자바스크립트에서 객체를 표기하는 방법
var m1 = {
  "name": "Honux",
  "hp": 100,
  "power": 10,
  "attack": function(target) {
    target.hp -= this.power;
  }
};



<<연습문제3>>
* 소수 출력하기		//ex3.html
1 - 10000 사이의 소수를 화면에 출력하는 프로그램을 작성해 봅시다.
HTML + JS로 작성할 것
객체와 메소드를 사용해 볼 것
최대한 예쁘게 만들어 볼 것



<<git과 github2>>
* 지난 강의 요약
- clone: 원격 저장소 (github) 을 내 컴퓨터에 복사해 온다.
- add: 내 컴퓨터에서 작업한 파일들을 스테이지에 추가
- commit: 스테이지에 올라온 파일들을 가지고 내 컴퓨터에 저장 (세이브와 같다.)
- push: 커밋들을 원격 저장소에 업로드

* 이번 강의 요약
- checkout(= 코드뭉치 버리기) 을 이용하면 아주 쉽게 마지막 커밋으로 되돌아 갈 수 있다.
- sourceTree의 코드뭉치 버리기 기능을 사용하면 변경사항을 되돌릴 수 있다.

* 코드뭉치 버리기: 작업 공간에서 소스 창에서 코드 뭉치 버리기 하면 됨



<<[실습] 구구단 구현하기2>>		//gugudan_4.html
* 학습 목표:
- 배열을 활용해 구구단을 구현하는 경험을 한다.
- 반복문으로 배열의 데이터를 처리한다.
- 2중 반복문을 사용해 본다.

* 요구사항:
- 구구단 결과을 배열에 저장한 후 배열의 결과를 출력한다.
- 2단에서 9단까지 전체를 출력하는데 많은 중복 코드가 발생한다.
- 반복문을 사용해 2단과 9단에 대한 중복을 제거한다.

* 결과물:
- 구구단을 콘솔에 출력하는 프로그램
- 구구단을 html에 출력하는 프로그램
- github 저장소



<<함수를 이용해 구구단 다시 구현>>	//gugudan_5.html
* 요구사항:
- 함수를 활용해 반복적으로 발생하는 코드를 줄인다.
- 공부를 위해 메인함수를 사용해 본다.		//전역변수 쓰는 것을 줄일 수 있음
* 힌트:
- 구구단 계산 결과를 배열에 담는 로직을 새로운 함수로 분리한다.
- 배열에 담은 데이터를 화면에 출력하는 로직을 새로운 함수로 분리한다.

function calculrate(num) {
    var results = [];
    for (var i = 1; i < results.length; i++) {
    // 계산 결과를 배열에 저장
    }
    return results
}

function print(results) {
    // 계산 결과를 화면에 출력
}
function main() {
    // 나머지 코드들은 여기에 
}
main();



<<객체를 활용해 구구단 다시 구현>>		//gugudan_6.html
* 요구사항:
- main() 메소드는 프로그램을 시작하는 역할을 한다.
- 함수를 구구단 객체의 메소드로 변경한다.

* 힌트:
- gugudan 이라는 객체를 생성한다.
- gugudan 객체에 앞 단계에서 작성한 함수를 메소드로 추가한다.
- 객체를 이용해서 main함수 내부를 수정한다.

gugudan = {}
gugudan.calculate = function {
    // ...
}

functin main()



<<추가 미션 및 마무리하기>>		//gugudan_7.html
* 최종 요구사항:
- 참고자료, 교재, 인터넷의 도움 없이 백지 상태에서 구구단을 구현한다.
- 사용자가 입력한 값에 따라 크기가 다른 구구단을 계산해 출력한다.
- 예를 들어 사용자가 "8,7"과 같은 문자열을 입력하면 팔칠단을 구현한다. 팔칠단은 2 * 1 ... 2 * 7, 3 * 1 ... 3 * 7, ... , 8 * 1 ... 8 * 7 까지 구현하는 것을 의미한다.
- html, css, DOM 등을 배워서 조금 더 예쁜 화면을 만들어 본다.



//3. 계산기 구현 준비
<<배열과 문자열2>>
* 배열의 메소드 더 살펴보기

* concat() :배열 합치기, 문자열도 가능	//하지만 기존 배열에 저장되지는 않음. 새로운 배열을 만들어야 함.	//문자열에서는 +로도 가능하다

* join(): 배열을 문자열로 바꿀 때 사용합니다.
var a = [1, 2, 3];
a.join();	//123
a.join("--")	//1--2--3

* indexOf(), lastIndexOf(): 배열이나 문자열안의 원소를 가지고 인덱스를 찾을 수 있음
var a = [1, 2, 3, 4, 5, 2, 3];
a.indexOf(1);	//0
a.indexOf(2);	//1
a.laastIndexOf(2)	//5

a.indexOf(100);	//-1
*활용: 	if(a.indexOf(100) === -1)	console.log("100없네");

* slice()		//원본 안 변함
사용법: slice(startIndex, endIndex) 기존 배열을 잘라서 새로운 배열을 만듭니다. 기존 배열은 변하지 않습니다. startIndex 위치부터 endIndex 직전의 위치까지 자릅니다. endIndex의 원소는 포함되지 않습니다.

var a = [1, 2, 3, 4, 5];
a.slice(2, 4);	//[3, 4]
a;		//[1, 2, 3, 4, 5]

* splice()		//원본 변함. 	//배열 O, 문자열 X
- 사용법: splice(startIndex, numElement)
- 배열을 startIndex부터 numElement 개수만큼 잘라냅니다.
- 잘라낸 원소들은 원본 배열에서 사라집니다.
- slice()와 splice()는 둘다 유용하므로 각각의 사용법을 잘 기억해 놓는 게 좋습니다.
var a2 = a.splice(2, 3);	//'2번째'부터 '3개'

* 문자열의 split()
- 문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.
var s = "hello, world a-b-co,ltd";
s.split("");		//["h", "e", "l", ... ]
s.join("");		//이전으로 돌아감
s.split(",");		//["hello", "world a-b-co", ... ]



<<조건문2: switch-case>>		//grade.html
* 점수가 10점이면 A, 9점이면 B, 그 외에는 C를 출력하는 코드를 작성하세요.
- if로 구현
- switch-case로 구현



<<객체2>>
* 생성자를 이용하여 객체 만들기
var m1 = new Human("Honux", 100, 10);	//m1은 객체 또는 인스턴스라고 합니다. m1은 그리고 참조 변수임
var m2 = new Human("Crong", 999, 1);
m1.attack(m2);
m2.attack(m1);
m1.show();
m2.show();

* 생성자를 사용하는 이유
- 객체를 하나만 만들 때는 간단히 json 표기법으로 만듭니다.
- 여러 객체를 만들고 싶을 때는 생성자를 통해서 만듭니다.

* 예제		//obj.html
- Food(name, energy) 생성자를 만들어 봅시다.
- eat(food) 메소드를 Human() 생성자 안에 추가해 봅시다.
- 도너츠 객체를 생성해서 휴먼 객체에게 먹여 봅시다.



<<참조 변수와 Call by reference>>
* 참조 변수와 일반 변수
객체를 변수에 할당하면 참조 변수가 되고, 기본 타입을 변수에 할당하면 일반 변수가 됩니다.

* 요약
- 값 전달 변수는 함수 내부에서 값을 바꿔도 외부에서는 그대로입니다.
- 참조 전달 변수는 함수 내부에서 값을 바꾸면 외부의 객체도 값이 바뀝니다.



<<객체와 프로토타입>>
* 프로토타입:  메모리를 절약하고 효율적으로 객체의 메소드를 생성할 수 있습니다.



<<DOM과 HTML>>
* HTML과 JS 분리하기
@ dom.html
...
<script src="./dom_test.js"></script>
...

@ dom_test.js
var msg = "Hello";
alert(msg);

*DOM (Document Object Model)
- 문서를 객체를 이용해서 계층 구조로 표현함
- 표준: W3CDOM
- 구현체: Gecko, Webkit 등

* html 객체
- HTML 문서도 객체로 간주된다.
- window: 최상위 객체
- document: dom의 최상위 객체이면서 window의 하위 객체

var list = document.getElementsByTagName('h1');
list[0].innerHTML;
list[0].innerHTML = "Hello";

* DOM 객체의 값 바꾸기
var element = document.getElementById('id')
element.innerHTML = '값'

<h2>My First Page</h2>
<p id="test"></p>

<script>
var p = document.getElementById("test");
p.innerHTML = "Hello World!";
</script>

var list = document.getElementById('main');
main.innerHTML = "Hello";



<<DOM으로 버튼 추가해보기>>
* 준비하기
아래의 내용이 포함된 html 파일을 하나 작성합니다.
<div id="test">메뉴판 예제</div>
<script src="add_button.js"></script>

* DOM을 이용해 html 객체 추가하기
var el = document.getElementById('test');
var menu = document.createElement('ul');  
menu.id = 'menupan';

var item1 = document.createElement('li');
item1.id = 'menu1';
item1.innerHTML = "설렁탕";

var item2 = document.createElement('li');
item2.id = 'menu2';
item2.innerHTML = "추어탕";

menu.appendChild(item1);  
menu.appendChild(item2);  

el.appendChild(menu);

* input 과 button 샘플
<input type='text' id='input1'><button id='btn1' onclick='read()'>click</button>
<script> 
    var read = function() {
        var input = document.getElementById('input1');
        console.log(input.value);
    };
</script>



<<git의 브랜치 개념 이해하기>>
* 이번 강의 요약
- 브랜치 (branch): 기능 변경을 하고 싶을 때 생성 및 사용
- 머지 (merge): 한 브랜치의 내용을 다른 브랜치에 반영
- 체크아웃 (checkout): 저장소에서 특정 커밋이나 브랜치로 돌아가고 싶을 때 사용



//[실습] 계산기 구현하기
<<문자열 계산기>>
* 요구사항
사용자가 입력한 값에 따라 사칙연산을 계산할 수 있는 계산기를 구현한다.
예를 들어 "2 + 3 * 4 / 2"와 같은 순서로 값을 입력하는 경우 실행 결과 값인 10을 출력해야 한다.
사용자가 입력할 수 있는 값의 수는 제한되어 있지 않다.
나눗셈의 결과 값은 정수로 값이 떨어지지 않더라도 정수 값만 사용하는 것으로 한다.
q를 입력하면 결과값 출력하고 종료



<<함수를 활용해 사칙연산 구현>>
* 요구사항
메인 함수, 사용자의 값을 입력하는 함수, 출력하는 함수 등 함수로 코드를 나누어 구현한다.
사용자의 값을 입력하는 구현은 첫 번째 숫자 값, 사칙연산 기호 및 quit, 두 번째 숫자 값 입력으로 나뉜다.

* 힌트
각 요구사항에 해당하는 함수를 하나씩 생성한 후 지금까지 main() 함수에서 구현하던 로직을 각 함수로 이동한다.
대략 다음과 같은 함수들로 나뉠 수 있다.
fucntion getFirstValue()
function getSecondValue() 
function getOperator()
function calculate()
function print()
function main()









